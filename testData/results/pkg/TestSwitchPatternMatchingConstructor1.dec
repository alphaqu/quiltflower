package pkg;

import java.lang.runtime.SwitchBootstraps;

public class TestSwitchPatternMatchingConstructor1 {
   private TestSwitchPatternMatchingConstructor1(String s) {
      System.out.println(s);// 5
   }// 6

   private TestSwitchPatternMatchingConstructor1(TestSwitchPatternMatchingConstructor1.Shape s) {
      TestSwitchPatternMatchingConstructor1.Shape var2 = s;
      byte var3 = 0;

      String var10001;
      label17:
      while(true) {
         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatchingConstructor1.Triangle,TestSwitchPatternMatchingConstructor1.Triangle>(
            var2, var3
         )) {
         case -1:
            var10001 = "null";// 12
            break label17;
         case 0:
            TestSwitchPatternMatchingConstructor1.Triangle t = (TestSwitchPatternMatchingConstructor1.Triangle)var2;// 10
            if (!(t.calculateArea() > 100.0)) {
               var3 = 1;
               break;
            }

            var10001 = "Large triangle";
            break label17;
         case 1:
            TestSwitchPatternMatchingConstructor1.Triangle t = (TestSwitchPatternMatchingConstructor1.Triangle)var2;// 11
            var10001 = "Small triangle";
            break label17;
         default:
            var10001 = "Non-triangle";// 13
            break label17;
         }
      }

      this(var10001);// 9
   }// 15

   private abstract class Shape {
      abstract double calculateArea();
   }

   private class Triangle extends TestSwitchPatternMatchingConstructor1.Shape {
      @Override
      double calculateArea() {
         return 0.0;// 25
      }
   }
}

class 'pkg/TestSwitchPatternMatchingConstructor1' {
   method '<init> (Ljava/lang/String;)V' {
      4      6
      5      6
      6      6
      7      6
      8      6
      9      6
      a      6
      b      7
   }

   method '<init> (Lpkg/TestSwitchPatternMatchingConstructor1$Shape;)V' {
      1      10
      2      10
      3      11
      4      11
      5      17
      6      17
      7      16
      8      16
      9      16
      a      16
      b      16
      c      16
      28      23
      29      23
      2a      23
      2b      23
      2c      23
      2d      23
      2e      24
      2f      24
      30      24
      31      24
      32      24
      33      24
      34      24
      35      24
      36      24
      37      24
      3a      25
      3b      25
      3c      26
      3f      29
      40      29
      41      30
      44      32
      45      32
      46      32
      47      32
      48      32
      49      32
      4a      33
      4b      33
      4c      34
      4f      20
      50      20
      51      21
      54      36
      55      36
      56      37
      59      41
      5a      41
      5b      41
      5c      42
   }
}

class 'pkg/TestSwitchPatternMatchingConstructor1$Triangle' {
   method 'calculateArea ()D' {
      0      51
      1      51
   }
}

Lines mapping:
5 <-> 7
6 <-> 8
9 <-> 42
10 <-> 24
11 <-> 33
12 <-> 21
13 <-> 37
15 <-> 43
25 <-> 52
Not mapped:
4
