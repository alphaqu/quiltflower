package pkg;

public abstract class TestAnonymousClass {
   public static final Runnable R3 = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 36
         int b = 5;// 37
      }// 38
   };
   public static final Runnable R = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 53
         int b = 5;// 54
      }// 55
   };
   public static final Runnable R1 = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 61
         int b = 5;// 62
      }// 63
   };
   private final TestAnonymousClass.InnerRecursive y = new TestAnonymousClass.InnerRecursive(
      new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
         @Override
         void foo() {
            int a = 5;// 83
            int b = 5;// 84
            int g = 5;// 85
         }// 86
      }
   ) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };
   private final TestAnonymousClass.InnerRecursive x = new TestAnonymousClass.InnerRecursive(
      new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
         @Override
         void foo() {
            int a = 5;// 98
            int b = 5;// 99
            int g = 5;// 100
         }// 101
      }
   ) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };

   void foo(int i) throws Exception {
      if (i > 0) {// 10
         TestAnonymousClass.I r = new TestAnonymousClass.I() {// 11
            @Override
            public void foo() throws Exception {
               int a = 5;// 13
               int b = 5;// 14
            }// 15
         };
         r.foo();// 17
      } else {
         int x = 5;// 20
         System.out.println(5);// 21
      }

   }// 23

   void bar() {
      ((<undefinedtype>)(new Object() {
         public void foo(String s) {
            System.out.println(s);// 28
         }// 29
      })).foo("Hello world");// 26 30
   }// 31

   void boo() {
      int a = 5;// 43
   }// 44

   void zoo() {
      int a = 5;// 47
   }// 48

   interface I {
      void foo() throws Exception;
   }

   private static class Inner {
      private static Runnable R_I = new Runnable() {
         @Override
         public void run() {
            int a = 5;// 74
            int b = 5;// 75
         }// 76
      };
   }

   static class InnerRecursive {
      TestAnonymousClass.InnerRecursive r;

      public InnerRecursive(TestAnonymousClass.InnerRecursive r) {
         this.r = r;// 113
      }// 114

      void foo() {
      }// 118
   }
}

class 'pkg/TestAnonymousClass$3' {
   method 'run ()V' {
      0      6
      1      6
      2      7
      3      7
      4      8
   }
}

class 'pkg/TestAnonymousClass$4' {
   method 'run ()V' {
      0      13
      1      13
      2      14
      3      14
      4      15
   }
}

class 'pkg/TestAnonymousClass$5' {
   method 'run ()V' {
      0      20
      1      20
      2      21
      3      21
      4      22
   }
}

class 'pkg/TestAnonymousClass$6' {
   method 'foo ()V' {
      0      28
      1      28
      2      29
      3      29
      4      30
      5      30
      6      31
   }
}

class 'pkg/TestAnonymousClass$8' {
   method 'foo ()V' {
      0      43
      1      43
      2      44
      3      44
      4      45
      5      45
      6      46
   }
}

class 'pkg/TestAnonymousClass' {
   method 'foo (I)V' {
      0      56
      1      56
      c      57
      d      64
      e      64
      f      64
      10      64
      11      64
      12      64
      16      66
      17      66
      18      67
      19      67
      1a      67
      1b      67
      1c      67
      1f      70
   }

   method 'bar ()V' {
      8      77
      9      77
      a      77
      b      77
      c      77
      d      78
   }

   method 'boo ()V' {
      0      81
      1      81
      2      82
   }

   method 'zoo ()V' {
      0      85
      1      85
      2      86
   }
}

class 'pkg/TestAnonymousClass$1' {
   method 'foo ()V' {
      0      60
      1      60
      2      61
      3      61
      4      62
   }
}

class 'pkg/TestAnonymousClass$2' {
   method 'foo (Ljava/lang/String;)V' {
      0      75
      1      75
      2      75
      3      75
      4      75
      5      75
      6      75
      7      76
   }
}

class 'pkg/TestAnonymousClass$Inner$1' {
   method 'run ()V' {
      0      96
      1      96
      2      97
      3      97
      4      98
   }
}

class 'pkg/TestAnonymousClass$InnerRecursive' {
   method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
      4      106
      5      106
      6      106
      7      106
      8      106
      9      107
   }

   method 'foo ()V' {
      0      110
   }
}

Lines mapping:
10 <-> 57
11 <-> 58
13 <-> 61
14 <-> 62
15 <-> 63
17 <-> 65
20 <-> 67
21 <-> 68
23 <-> 71
26 <-> 78
28 <-> 76
29 <-> 77
30 <-> 78
31 <-> 79
36 <-> 7
37 <-> 8
38 <-> 9
43 <-> 82
44 <-> 83
47 <-> 86
48 <-> 87
53 <-> 14
54 <-> 15
55 <-> 16
61 <-> 21
62 <-> 22
63 <-> 23
74 <-> 97
75 <-> 98
76 <-> 99
83 <-> 29
84 <-> 30
85 <-> 31
86 <-> 32
98 <-> 44
99 <-> 45
100 <-> 46
101 <-> 47
113 <-> 107
114 <-> 108
118 <-> 111
Not mapped:
18
112
